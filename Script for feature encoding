import pandas as pd
import numpy as np
import re

def process_features(data, data_dictionary_path):
    # Load the data dictionary
    dictionary = pd.read_excel(data_dictionary_path)
    
    for _, row in dictionary.iterrows():
        feature_name = row['NAME']
        valid_values = row['VALID VALUES']
        special_codes = row['DEFAULT VALUES AND DESCRIPTIONS']
        
        if feature_name not in data.columns:
            print(f"Warning: {feature_name} not found in the dataset. Skipping.")
            continue
        
        # Process valid values (range)
        if pd.notna(valid_values):
            try:
                lower, upper = map(float, valid_values.split('-'))
                data[f'{feature_name}_in_range'] = data[feature_name].between(lower, upper)
            except ValueError:
                print(f"Warning: Unable to process valid values for {feature_name}. Skipping range check.")
        
        # Process special codes
        if pd.notna(special_codes):
            # Split the special codes string into individual code-description pairs
            code_desc_pairs = special_codes.split('\n\n')
            
            code_dict = {}
            for pair in code_desc_pairs:
                match = re.match(r'(\d+):\s*(.*)', pair.strip())
                if match:
                    code, desc = match.groups()
                    code_dict[code] = desc.strip()
            
            if code_dict:
                # Create a new column for special codes
                data[f'{feature_name}_special_code'] = data[feature_name].astype(str).where(data[feature_name].astype(str).isin(code_dict.keys()))
                
                # Create a new column with descriptions
                data[f'{feature_name}_description'] = data[feature_name].astype(str).map(code_dict)
                
                # Replace special codes with np.nan in the original column
                data[feature_name] = data[feature_name].replace(code_dict.keys(), np.nan)
    
    return data
